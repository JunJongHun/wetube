nodejs? 자바스크립트를 브라우저 밖에서 사용하게 해주는 도구

nodeJs 프로젝드를 만들기 위해서는 package.json 파일을 만들어야 한다.
(파일 이름은 무조건 소문자에 package.json 이여야 한다.) 
package.json 파일 안에는 json object를 만들어줘야한다.

json object 아래와 같은 형식을 가진다.

{
    "name": "wetube"
}

이런식으로 객체에 정보를 저장한다.

what is json? json 이란 프로그래머가 파일에 정보를 저장하기 위해 만든 방식 중 하나 이다.

*git init 하는 거는 알아두자. 깃 사용법에 대해서 알아두기

package.json 에 보면 다양한 정보들이 있는데
"main" 은 패키지를 배포를 해서 패키지를 다운받고 사용하게되면 main이 실행되게 한다.
"scripts" 는 package.json에서 원하는 파일을 실행 시킬 수 있는 명령어들을 모아둔 곳 이다.
(node index.js 처럼 실행하는 것과 npm run 스크립트에 있는 문장 을 사용하는 것은 차이점이 있다.)
npm run 을 사용하려면 package.json이 있는 프로젝트 파일에서 사용해야 가능하다.

### pacakge.json 파일에 “type” : “module” 추가Permalink
기본적으로 package.json 에 type 필드가 없으면 common.js(default) 방식이 적용되어 모듈 처리방식이 common.js 의 require 방식이된다. 따라서, ES6 의 import - export를 사용하려면 루트 디렉토리에 있는 package.json 파일에 "type": "module"를 추가해야한다. ( 에러가 나면 확인해보자)

node_modules 파일은 npm으로 설치한 패키지들이 저장되는 곳.

예를 들어서 npm install express를 하게 되면 node_moudules에 패키기가 저장이 되는데,
express 패키지만 생성되는게 아니다. 왜냐하면 express를 사용하기 위해서는 
또 다른 패키지들이 필요로 하기 때문에 express 패키지와 종속된 패키지들은 
npm이 자동으로 설치를 해준다. 패키지를 설치 했을 때, 다른 패키지들도 자동으로 설치 될 수
있다는 것을 알아두자.

종속되어 있는 패키지들이 써져 있는 곳은 package.json 안에 dependencies라는 곳에 써져 있다.
그리고 내 프로젝트에 잇는 package.json에 보면 dependencies에 express가 추가 된 것을 볼 수 있다.

이 과정은 굉장히 중요하다고 볼 수 있다. 왜냐하면 팀 프로젝트를 할 때, git 에 올려서 
작업을 할텐데, node_modules 파일을 올리게 된다면 굉장히 많은 공간을 차지 할 것 이다.
이럴 때, package.json과 package-lock.json,indexjs 만 공유한다면 npm isntall을 통해서
dependencies에 있는 패키지들을 손 쉽게 다운로드 할 수 있기 때문이다. package-lock.json을 통해서
버전 관리도 똑같이 할 수 있을 것이다.

* git 에 파일을 올리고 싶지 않은 경우에는 .gitignore 파일을 만들고,
무시하고 싶은 파일 명을 적어주면된다. ex) /node_modules 이렇게 작성하면 된다.

dependencies 와 devDpendencies 차이는 무엇인가?
dependencies 프로젝트를 실행하는데 필요한 것을 모아둔 곳이고,
devDpendencies 는 개발자가 필요한 것들을 모아둔 곳이다.
하지만 설치되는건 node_modules에 모두 설치된다. 구분짓기 위함일 뿐이다.
( 설치를 할 때, install --save-dev @babel/core 이런식으로 해줘야 package.json에 구별지어서 저장된다.)
( --save-dev 를 안하면 dependencies에 저장된다.)
( 혹여 실수를 하더라도 package.json 파일에서 직접 수정해도 무관하다. 왜냐하면 text 파일이니까)


* babel 에서 preset은 플러그인이다. 플러그인은 도와주는 녀석이다.(추가적으로 알아볼 것 자바스크립트 말고도 다른것들도 되는 듯 하다)

babel은 최신 javascript 문법을 브라우저가 이해할 수 있는 문법으로 바꿔주는  컴파일러 이다.
이걸 왜 사용해야하나? 최신 문법을 사용했을 경우 컴파일 과정에서 에러가 날 수 있다.
버전에 맞지 않는 것들을 바꿔줌으로써 좀 더 편리하게 코드를 작성 할 수 있다.

babel을 사용하기 위해서는 babel.config.json 파일을 만들고 세팅해줘야한다.(홈페이지를 참고하자)

nodemon 은 파일을 수정할 때마다 자동으로 파일을 실행해주는 패키지다.(npm run 을 한번만 해도 된다.)

* 실행이 안될 때, package.json 에 scripts 를 보고 파일명이 정확한지, 위치는 정확한지 확인하기

import express from "express"; 를 할 때, npm은 똑똑해서 node_modules/express를 안해도 알아서 찾는다.

what is 'express'? nodejs 를 사용하여 쉽게 서버를 구성할 수 있게 만든 프레임워크.
프레임워크란? 클래스와 라이브러리의 집합체,  개발자가 더욱 편하게 개발을 할 수 있도록 도와줌



express를 사용해서 서버를 만들기 위해서는 express application 을 생성해야한다.
express() 를 사용하면 application 을 리턴한다.
application은 객체이다. 당연히 객체 안에는 서버를 구축하기 위한 메소드들이 있을 것이다. 그중에 대표가 get 메소드다.

서버란 무엇이냐? 우리가 아는 컴퓨다 그 자체이다.
우리는 서버에 요청을 하는데 ex) google.com == google.com/ 이런식으로 request 을 하면 서버는 listening하고 있다.

서버를 시작하려면 application의 listen() 메소드를 사용하면 된다. 실행하면 서버가 시작된다.
서버에게 어떤 port를 listening할지 값을 줘야한다.
서버에 가는 방법 url에 localhost:port번호를 입력

웹사이트에 접속 할 때, 브라우저는 서버에 요청하고 응답받은 결과를 가져오는 것이다.

express 는 함수에 인자 3개를 준다. 순서대로 request, respones, next 이것을 잊지 말자

브라우저가 요청을 하면 서버는 응답을 해줘야한다. 응답방법은 return respones의 객체를 이용하는 것인데,
return res.end() 이런 방법이 있다. 이렇게 하면 서버는 응답을 할 것이다.

controller 는 총 3개의 argument를 가지고 있다. 위에서 말한 3가지다.
모든 controller는 middleware 이라고 볼 수 있다.  

use(), get() 차이를 알아두자. use()는 gobal middleware 이다.
즉, 모든 요청에 반영이 될 것이다. == 모든 route에서 함수를 사용한다.
get(), use() 사용할 때, 순서를 잘 고려해서 사용해야한다.
middleware 를 use하는게 먼저 오고, 그다음에 url의 get이 와야한다.

use()를 middleware로 사용할 경우, next()를 사용하지 않으면 밑에 함수들은 작동하지 않는다.
그 이유는 요청을 하는데 응답이 오지 않기 때문이라고 예측한다.(확실한 내용을 알아보기)
return 을 사용해도 middleware가 연결을 종료하기 때문에 같은 현상이 일어난다.

middleWare은 왜 사용하냐?
morgan 은 node.js 용 request logger middleware 이다
morgan 을 사용함으로써 우리가 필요로하는 정보들을 미리 설정해 놓았고 그걸 사용하기만 하면 된다.


Router 란? 컨트롤러와 URL관리를 쉽게 해준다

///


내용 정리하기


///


Express 에게 html 헬퍼로 pug를 쓰겠다고 할 수 있다.
express에서 세팅을 할 수 있는데 보통 app.set()으로 세팅을한다.
app.set("view engine","pug") 이런식으로 세팅을 해준다. (뷰 엔진을 pug로 설정했다는 뜻)

1. npm i pug ( 퍼그를 설치한다.)
2. pug 를 뷰 엔진으로 설정
3. pug 파일을 만든다.


view 는 유저가 보는 대상을 말한다.( 이해 잘 안감)
express가 view 를 찾는 방법은 cwd(현재 작업 디렉토리) + /views 디렉토리를 찾는다. 그렇다면 views 폴더를 만들어야 한다는 뜻.

pug 파일을 유저에게 어떻게 보낼까? pug 파일을 그대로 유저에게 보내는게 아니다.
pug로 만든 파일을 우선 pug에게 보내고 pug가 파일을 렌더링 해서 평범한 html 파일로 만든다.

응답을 할 때, res.render("뷰 이름"); 을 해주면 된다. ex) res.render("home");

express에게 현재 작업 디렉토리는 package.json 이 있는 곳이다.
cwd는 어떻게 정해지는걸까? 서버를 기동하는 파일의 위치에 따라 결정된다!
어디서 노드를 부르고 있는지에 따라 결정된다.
그럼 누가 서버를 기동하는가? package.json 이 한다.
/documents/wetube 폴더에서 package.json이 node.js를 실행하고 있다면 /documents/wetube 가 cwd가 된다.
server.js가 있는 src 폴더에 있다면? 바뀌겠지
서버를 시동하거나 node.js를 실행하는건 package.json 이라는 것을 알고있자.

express cwd 바꾸는 법 app.set("views","원하는 경로") => view를 작동시키기 위한 방법
process.cwd() 해보면 위치가 바뀌지는 않음

pug의 장점을 살펴보자
깔끔한 html
html에 자바스크립트 포함 가능
혹여 페이지들마다 공통적인 부분을 수정해야 할 때, 한번에 수정 가능하다
include를 해서 파일을 포함시키면 된다. (단 포함할때 경로 잘 생각하기, 절대경로로 할지 상대경로로할지)

근데 include를 하게 되면, 파일마다 include를 해야하고 결국 복사하는 상황은 같게 된다.
비슷한 형식이 있다면 거시서 확장해가는 식으로 하면 어떨까?
extends 를 활용해서 파일을 확정해나가는 식으로 해보자.

block 이란? 말 그대로 블록이라 생각하면 된다. 블럭을 만들어서 끼워 넣는다 생각하자.

pug 에 변수를 어떻게 보내주나? pug파일을 렌더링 하고 있는 녀석에게 같이 주면 된다.
ex) res.render("pug파일", {변수 : ""}); 이런식으로 보낸다 변수는 여러개 가능, 딕셔너리 형태로

mixin 이 무엇이냐? 전에 partial를 배웠다. partial은 미리 만들어 놓은 html 조각을 갖다 쓰기 위한 것이였다.
mixin 도 비슷하지만 미리 만들어놓은 html 형태에 데이터를 바꿔가며 사용할 수 있게금 만드는 것이다.
둘의 차이는 변하는 데이터를 사용하냐 안하냐 이 차이가 있고 include를 하는 것에 차이가 있다.
mixin은 함수와 비슷한 형태로 만들어 줘야 한다.
mixin을 사용할때는 +파일명을 써줘야한다. 코드를 적으려고 하는 부분에!

href 할때 주의할점 !
/ 를 쓰는 것과  안 쓰는 것에 차이!
href="/edit" 하는 것은 위치에 상관없이 절대경로 느낌이다. absolute url
href="edit" 하는 것은 현재 위치에서 추가되는 것이다!  relative url
(url의 끝부분을 바꿔준다 생각하면 된다. ex) localhost:400/videos/3 -> localhost:4000/videos/edit

